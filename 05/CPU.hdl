// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //The A Register should be loaded
    //if we are receiving a A instruction
    //or if we are receiving a C instruction
    //and the destination include Register All
    //Note (~A or (A and B) == ~A or B)
    Not(in=instruction[15],out=isAInstruction);
    Or(a=isAInstruction,b=instruction[5],out=loadA);

    //Determining the source of the input for A Register
    //ARegister only holds data which comes from the ALU
    //or A type instructions. Only load from instruction
    //bus from A instructions.  Route data from C instruction
    //from ALU to A register.  If A register is not to 
    //store the data on a C instruction, load logic will 
    //prevent it.
    //Register A will always output to address bus
    Mux16(a=aluToA,b=instruction,sel=instruction[15],out=inputAReg);

    ARegister(in=inputAReg,load=loadA,out=fromAReg,out[0..14]=addressM,out=toPC);
    
    //loading must result from C instruction
    //with a destination that includes D.
    //Otherwise, an a instruction with a RAM
    //address containing a 1 in the proper bit could 
    //accidentally trigger a load
    //NOTE:All inputs come to d 
    //through the ALU. No direct connections
    //to Areg or memory
    

    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=aluToD,load=loadD,out=fromDReg);


    
    //Route data to ALU from A register when 
    //instruction[12] is low, from memory when 
    //high.  ALU will treat all instructions as 
    //C instructions.  If instruction is A instruction
    //memory units will simply not latch the output.
    Mux16(a=fromAReg,b=inM,sel=instruction[12],out=fromAMReg);
    
    //The ALU's input will receive instructions directly
    //from the instruction bus and will always assume that 
    //instruction given is a C instruction.
    //With A instructions, this will result in nonsense, but
    //this will not matter as all other memory units will 
    //only latch on a C instruction.

    ALU(x=fromDReg,y=fromAMReg,zx=instruction[11],nx=instruction[10],
        zy=instruction[9],ny=instruction[8],f=instruction[7],
        no=instruction[6],zr=zr,ng=ng,out=outM,out=aluToD,out=aluToA);

    //only activate memory latch flag on a C instruction
    //where the destination includes the memory
    And(a=instruction[15],b=instruction[3],out=writeM); 

    //handle jump instructons
    //loading only occurs either when jump condition
    //as been met and the instruction is a C
    //To meet a jump when specified, only one of the 
    //three instruction flags and it's corresponding condition
    //must be true
    //Note: if Reset is true, PC will automatically ignore
    //load and inc, so do not worry about testing for load

    //calculate jumps 
    
    //calculate gt 0
    Not(in=zr,out=notZr);
    Not(in=ng,out=notNg);
    And(a=notZr,b=notNg,out=notZN);
    And(a=instruction[0],b=notZN,out=greater);

    //calculate eq 0
    And(a=instruction[1],b=zr,out=equal);

    //calculate lt 0
    And(a=instruction[2],b=ng,out=less);

    //ensure jump condition met
    Or(a=greater,b=equal,out=gte);
    Or(a=gte,b=less,out=jumpMet);

    //only jump ifand is a c instruction
    And(a=jumpMet,b=instruction[15],out=jump);


    //reset will superced load and inc, and inc
    //will be superceded by both by PC's design
    //Thus, setting inc to true will have no effect
    //if the either of the other condistion are true
    PC(in=toPC,reset=reset,load=jump,inc=true,out[0..14]=pc);



}