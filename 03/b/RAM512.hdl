// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:

    //Most significant 3 bits used to select RAM64 module.  
    //Lower 6 bits sent to indvidual modue for internal addressing

    DMux8Way(in=load,sel=address[6..8],a=r0,b=r1,c=r2,d=r3,e=r4,f=r5,g=r6,h=r7);
    RAM64(in=in,address=address[0..5],load=r0,out=out0);
    RAM64(in=in,address=address[0..5],load=r1,out=out1);
    RAM64(in=in,address=address[0..5],load=r2,out=out2);
    RAM64(in=in,address=address[0..5],load=r3,out=out3);
    RAM64(in=in,address=address[0..5],load=r4,out=out4);
    RAM64(in=in,address=address[0..5],load=r5,out=out5);
    RAM64(in=in,address=address[0..5],load=r6,out=out6);   
    RAM64(in=in,address=address[0..5],load=r7,out=out7);
    //use multplexer to set the output as only one can write to bus
    Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address[6..8],out=out);
}